import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
import requests

API_TOKEN = "7805102550:AAE6h4NplvoXaWhJoVB85yKVWymuHj-WMyM"
API_KEY = 'cc7279828827aa430d91d763fbc16083'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

ADMIN = {5932796462}
block_users = set()


class Form(StatesGroup):
    name = State()
    age = State()


menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìñ –ö–æ–º–∞–Ω–¥—ã"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="üìù –ü–æ–º–æ—â—å"), KeyboardButton(text="‚ùå –í—ã–π—Ç–∏")]
    ],
    resize_keyboard=True
)


# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
def get_admin_panel():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîí –ó–∞–±–∞–Ω–∏—Ç—å", callback_data="ban"),
             InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å", callback_data="unban")]
        ]
    )


# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.",
                         reply_markup=menu_keyboard)


# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg (FSM)
@router.message(Command("reg"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.set_state(Form.name)
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")


@router.message(StateFilter(Form.name))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


@router.message(StateFilter(Form.age))
async def process_age(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    age = message.text
    await message.answer(f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}")
    await state.clear()


# ‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(Command("admin"))
async def admin_cmd(message: types.Message):
    if message.from_user.id in ADMIN:
        await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_panel())
    else:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∞–¥–º–∏–Ω—Å—Ç–≤–æ.")


# ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data.in_(["ban", "unban"]))
async def handle_admin_actions(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN:
        await callback.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
        return

    if callback.message.reply_to_message:
        user_id = callback.message.reply_to_message.from_user.id
        if callback.data == "ban":
            if user_id in ADMIN:
                await callback.message.answer("‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞!")
                return
            block_users.add(user_id)
            await callback.message.answer(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

        elif callback.data == "unban":
            block_users.discard(user_id)
            await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await callback.message.answer("‚ö† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!")

    await callback.answer()


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message()
async def check_blocked_users(message: types.Message):
    if message.from_user.id in block_users:
        await message.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –º–µ–Ω—é
    if message.text == "üìñ –ö–æ–º–∞–Ω–¥—ã":
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /stats, /reg, /admin")
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    elif message.text == "üìù –ü–æ–º–æ—â—å":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—é.")
    elif message.text == "‚ùå –í—ã–π—Ç–∏":
        await message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ.",
                             reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.", reply_markup=menu_keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather(city: str):
    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru'
    response = requests.get(url)
    data = response.json()

    if data.get('cod') != 200:
        return None

    city_name = data['name']
    country = data['sys']['country']
    temperature = data['main']['temp']
    weather = data['weather'][0]['description']
    humidity = data['main']['humidity']
    wind_speed = data['wind']['speed']

    return f"–ü–æ–≥–æ–¥–∞ –≤ {city_name}, {country}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n{weather.capitalize()}\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("weather"))
async def cmd_weather(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
@router.message()
async def get_weather_command(message: types.Message):
    city = message.text.strip()

    weather_info = get_weather(city)
    if weather_info:
        await message.answer(weather_info, parse_mode='Markdown')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É 'Markdown'
    else:
        await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="reg", description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        types.BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        types.BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.BotCommand(command="weather", description="–ü–æ–≥–æ–¥–∞")
    ])

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
